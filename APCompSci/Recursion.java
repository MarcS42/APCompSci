import java.text.DecimalFormat;

/**
 * 
 */

/**
 * @author MarcSherman
 *
 */
public class Recursion {
    
    
    /**
     * @param n An integer such that 0 < n < 16. n > 16 exceeds MAX_INTEGER
     * @return Factorial of n. (N!) 
     */
    public static int factorial(int n) {
        int nFactorial = n;
        if(n == 1) {
            return 1;
        } else {
            nFactorial = n* factorial (n-1);
            return nFactorial;
        }
    }
    
    /**Calculates Fibonacci number up to 47th element (else exceeds MAX_INTEGER)
     * Fibonacci # is series generated by adding 2 preceding integers
     * to get next element of series.
     * @param n is an integer 0 < n <47
     * @return Fibonacci number of nth element of Fibonacci series
     */
    public static int fibonacci(int n) {
        int nFibonacci = n;
        if(n == 1 || n == 2) {
            return 1;
        }else {
            nFibonacci = fibonacci(n-1) + fibonacci(n-2);
            return nFibonacci;
        }
    }
    
    public static void main(String[] args) {
        DecimalFormat formatCommas = new DecimalFormat("#,###");
        int factorial = factorial(16);
        for (int i = 1; i < 47; i++) {
            int fibonacci = fibonacci(i);
            System.out.print(formatCommas.format(fibonacci) + " ");
        }
        System.out.println();
    System.out.println(formatCommas.format(factorial));
    
    
    }
}
